# =============================================================================
# BROKER ONLINE - UNIFIED APPLICATION CONFIGURATION
# =============================================================================
# This file contains all configuration for both development and production
# Use --spring.profiles.active=dev or --spring.profiles.active=prod
# =============================================================================

# Application Identity
spring.application.name=broker-service
spring.main.banner-mode=console

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Default server configuration (production defaults)
server.port=${SERVER_PORT:8080}
server.servlet.session.timeout=${SESSION_TIMEOUT:1h}

# Production security settings (overridden in dev)
server.servlet.session.cookie.secure=${SESSION_SECURE:true}
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Production database (PostgreSQL)
spring.datasource.url=${POSTGRES_URL}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:validate}
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.format-sql=${FORMAT_SQL:false}
spring.sql.init.mode=${SQL_INIT_MODE:never}

# Connection pool configuration  
spring.datasource.hikari.maximum-pool-size=${DB_POOL_MAX:20}
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN:5}
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

# =============================================================================
# KITE CONNECT API CONFIGURATION
# =============================================================================

# Kite API credentials (required for all environments)
kite.api_key=${KITE_API_KEY}
kite.api_secret=${KITE_API_SECRET}
kite.user_id=${KITE_USER_ID}
kite.base-url=${KITE_BASE_URL:https://api.kite.trade}

# Development features (disabled by default for production)
kite.dev.auto_session=${AUTO_SESSION:false}
kite.dev.mock_session=${MOCK_SESSION:false}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CSRF and CORS (production defaults)
spring.security.csrf.enabled=${CSRF_ENABLED:true}
spring.web.cors.allowed-origins=${ALLOWED_ORIGINS:https://yourdomain.com}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=Authorization,Content-Type,X-Requested-With

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Production logging levels (can be overridden per environment)
logging.level.org.mandrin.rain.broker=${LOG_LEVEL_APP:INFO}
logging.level.org.springframework.web=${LOG_LEVEL_SPRING:WARN}
logging.level.org.hibernate.SQL=${LOG_LEVEL_SQL:WARN}
logging.level.org.hibernate.type=${LOG_LEVEL_HIBERNATE:WARN}
logging.level.com.zaxxer.hikari=${LOG_LEVEL_HIKARI:WARN}

# =============================================================================
# ACTUATOR ENDPOINTS
# =============================================================================

# Production-safe actuator configuration
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,metrics}
management.endpoint.health.show-details=${HEALTH_DETAILS:when-authorized}
management.endpoint.info.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.env.enabled=${ENV_ENDPOINT:false}
management.endpoint.beans.enabled=${BEANS_ENDPOINT:false}
management.endpoint.loggers.enabled=${LOGGERS_ENDPOINT:false}

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================

# Production caching with Redis
spring.cache.type=${CACHE_TYPE:redis}
spring.redis.host=${REDIS_HOST:localhost}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# Frontend API and behavior configuration
frontend.config.api.timeout=30000
frontend.config.session.check-frequency=300000
frontend.config.session.critical-check-frequency=30000
frontend.config.session.redirect-delay=2000
frontend.config.session.throttle-delay=30000
frontend.config.data.top-instruments-limit=10
frontend.config.data.search-results-limit=20
frontend.config.data.filtered-results-limit=50
frontend.config.data.refresh-delay=1000
frontend.config.orders.large-quantity-threshold=1000
frontend.config.exchanges.defaults=NSE,BSE
frontend.config.exchanges.primary=NSE
frontend.config.instruments.default-types=Options
frontend.config.instruments.popular=RELIANCE,TCS,INFY,HDFC,ICICIBANK
frontend.config.instruments.keywords=NIFTY,BANKNIFTY